
    qd-quadtree
    ===========

    experiment to find the best q and d factors for a quadtree for
    efficiently determining the bounding triangle in triangle meshes,
    in terms of both memory usage and time required for lookup.

     - q => how many triangles in each subregion.
     - d => maximum quadtree depth.

    procedure:

     - generate a 2D mesh filled with a random number of triangles.
     - run the quadtree generation routine with desired qd factors
       and record total number of nodes in the tree.
     - record total time taken to test 10000 random points within
       the mesh.
     - generate nice graphs.

    worries:

     - algorithm is topology sensitive, need to take test points and
       mesh vertices from the same distributions.

